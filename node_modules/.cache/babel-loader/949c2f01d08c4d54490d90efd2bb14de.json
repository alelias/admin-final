{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alexelias/Desktop/proyectos-react/calisteniaApp/frontendadminv2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alexelias/Desktop/proyectos-react/calisteniaApp/frontendadminv2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/alexelias/Desktop/proyectos-react/calisteniaApp/frontendadminv2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useRef,useState,useEffect,useCallback}from'react';import mapboxgl from'mapbox-gl';import MapboxGeocoder from'@mapbox/mapbox-gl-geocoder';var axios=require(\"axios\");mapboxgl.accessToken='pk.eyJ1Ijoid2FsZXRhIiwiYSI6ImNreGY5ZWtreTFvbnUydXE5aTF5eno4cGUifQ.tIMnTnqPoymEqgtchY33ew';var baseUrl=\"https://back-calistenia.herokuapp.com/api/parque\";//const imgPunto = '../../img/pngegg.png'\nexport var useMapbox=function useMapbox(puntoInicial){var mapaDiv=useRef();var setRef=useCallback(function(node){mapaDiv.current=node;},[]);//referencia a los marcadores\nvar marcadores=useRef({});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var mapa=useRef();var _useState3=useState(puntoInicial),_useState4=_slicedToArray(_useState3,2),coords=_useState4[0],setCoords=_useState4[1];useEffect(function(){var peticionGet=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(baseUrl).then(function(response){setData(response.data);}).catch(function(error){console.log(error);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function peticionGet(){return _ref.apply(this,arguments);};}();peticionGet();},[data]);useEffect(function(){var map=new mapboxgl.Map({container:mapaDiv.current,style:'mapbox://styles/mapbox/streets-v11',center:[puntoInicial.lng,puntoInicial.lat],zoom:puntoInicial.zoom});map.addControl(new mapboxgl.NavigationControl());map.addControl(new MapboxGeocoder({accessToken:mapboxgl.accessToken,mapboxgl:mapboxgl}));data.forEach(function(park){var marker=new mapboxgl.Marker().setLngLat([parseFloat(park.longitud),parseFloat(park.latitud)]).addTo(map);});mapa.current=map;},[]);//cuando se mueve el mapa\nuseEffect(function(){var _mapa$current;(_mapa$current=mapa.current)===null||_mapa$current===void 0?void 0:_mapa$current.on('move',function(){var _mapa$current$getCent=mapa.current.getCenter(),lng=_mapa$current$getCent.lng,lat=_mapa$current$getCent.lat;setCoords({lng:lng.toFixed(6),lat:lat.toFixed(6),zoom:mapa.current.getZoom().toFixed(2)});});},[]);//agregar marcadores\n/*\n    useEffect(() => {\n        mapa.current?.on('click', agregarMarcador);\n       \n    }, [agregarMarcador])\n*/return{coords:coords,setRef:setRef,marcadores:marcadores};};","map":{"version":3,"sources":["/Users/alexelias/Desktop/proyectos-react/calisteniaApp/frontendadminv2/src/hooks/useMapbox.js"],"names":["useRef","useState","useEffect","useCallback","mapboxgl","MapboxGeocoder","axios","require","accessToken","baseUrl","useMapbox","puntoInicial","mapaDiv","setRef","node","current","marcadores","data","setData","mapa","coords","setCoords","peticionGet","get","then","response","catch","error","console","log","map","Map","container","style","center","lng","lat","zoom","addControl","NavigationControl","forEach","park","marker","Marker","setLngLat","parseFloat","longitud","latitud","addTo","on","getCenter","toFixed","getZoom"],"mappings":"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","sourcesContent":["import {useRef,useState, useEffect, useCallback}  from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nconst axios = require(\"axios\");\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2FsZXRhIiwiYSI6ImNreGY5ZWtreTFvbnUydXE5aTF5eno4cGUifQ.tIMnTnqPoymEqgtchY33ew';\nconst baseUrl = \"https://back-calistenia.herokuapp.com/api/parque\";\n\n//const imgPunto = '../../img/pngegg.png'\n\nexport const useMapbox = (puntoInicial) => {\n    \n    const mapaDiv = useRef()\n    const setRef = useCallback((node) => {\n            mapaDiv.current = node;\n    },[])\n  \n    //referencia a los marcadores\n    const marcadores = useRef({});\n\n    const [data, setData] = useState([]);\n\n    const mapa = useRef()\n    const [coords, setCoords] = useState(puntoInicial)\n\n      useEffect(() => {\n        const peticionGet = async () => {\n    \n            await axios.get(baseUrl)\n              .then((response) => {\n              \n                setData(response.data);\n              })\n              .catch((error) => {\n                console.log(error);\n              });\n          };\n        peticionGet();\n      }, [data]);\n      \n\n\n    useEffect(() => {\n        const map = new mapboxgl.Map({\n            container: mapaDiv.current,\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: [puntoInicial.lng, puntoInicial.lat],\n            zoom: puntoInicial.zoom\n        });\n        map.addControl(new mapboxgl.NavigationControl());\n        \n        map.addControl(\n            new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl\n            }) \n        );\n\n        data.forEach((park) => {\n            const marker = new mapboxgl.Marker()\n        .setLngLat([parseFloat(park.longitud),parseFloat(park.latitud)])\n        .addTo(map);\n        })\n        \n\n        mapa.current = map;\n    },[])\n\n    //cuando se mueve el mapa\n    useEffect(() => {\n        mapa.current?.on('move', () => {\n            const {lng, lat} = mapa.current.getCenter();\n            setCoords({\n                lng: lng.toFixed(6),\n                lat: lat.toFixed(6),\n                zoom: mapa.current.getZoom().toFixed(2)\n            })\n        })\n    },[])\n\n    //agregar marcadores\n    /*\n    useEffect(() => {\n        mapa.current?.on('click', agregarMarcador);\n       \n    }, [agregarMarcador])\n*/\n    return{\n        coords,\n        setRef,\n        marcadores,\n    }\n}\n"]},"metadata":{},"sourceType":"module"}